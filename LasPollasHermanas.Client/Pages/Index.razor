@page "/"
@using Models;
@using Data;
@inject NavigationManager NavigationManager

<head>
    <link rel="stylesheet" href="/css/index.css">
</head>
<h1>Las Pollas Hermanas Catalog</h1>
@if (dildos is null)
{
    <p>Loading ...</p>
}
else
{
    <DeleteDildo dildo="@currentDildo" OnClose="@OnDeleteModalClose">
    </DeleteDildo>
    <div class="row mb-4">
        <div class="col-sm-6">
            <button type="button" class="btn btn-primary" @onclick="CreateDildo">New Dildo</button>
        </div>
    </div>
    <table class="table table-striped table-bordered table-hover">
    <thead class="table-dark">
        <th>Id</th>
        <th>Name</th>
        <th>Price</th>
        <th>Size</th>
        <th>Expire Date</th>
        <th>Material</th>
        <th>Color</th>
        <th>Stock</th>
        <th></th>
        <th></th>
    </thead>
    <tbody>
        @foreach (var dildo in dildos)
            {
                <tr>
                    <td>@dildo.Id</td>
                    <td>@dildo.Name</td>
                    <td>@dildo.Price</td>
                    <td>@dildo.Size</td>
                    <td>@dildo.ExpireDate.ToString("MM/dd/yyyy")</td>
                    <td>@dildo.Material</td>
                    <td>@dildo.Color</td>
                    <td>@dildo.Stock</td>
                    <td>
                        <button class="btn btn-primary" @onclick="(() =>EditDildo(dildo.Id))">
                            <i class="oi oi-pencil"></i>
                        </button>
                    </td>
                    <td>
                        <button class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#deleteModal"
                        @onclick="(() => currentDildo = dildo)"> <i class="oi oi-x"></i></button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code
{
    bool conditionPopUp { get; set; } = false;

    private int id;

    string PopupClass => conditionPopUp ? "active" : "inactive";
    private Dildo[]? dildos;
    private Dildo? currentDildo;
    protected override void OnInitialized()
    {
        dildos = DildoClient.GetDildos();
    }

    private void PopUp(int id)
    {
        this.conditionPopUp = !this.conditionPopUp;
        this.id = id;

    }

    private void RemoveDildo()
    {
        // Lógica de eliminación
        DildoClient.RemoveDildo(id);
        dildos = DildoClient.GetDildos();

        PopUp();
        StateHasChanged();
    }

    private void EditDildo(int dildoId)
    {
        NavigationManager.NavigateTo($"/edit/dildo/{dildoId}");
    }
    private void PopUp()
    {
        this.conditionPopUp = !this.conditionPopUp;
    }

    private void CreateDildo()
    {
        NavigationManager.NavigateTo("dildo");
    }

    private void EditDildo(int id)
    {
        NavigationManager.NavigateTo($"/dildo/{id}");
    }

    private void OnDeleteModalClose(bool accepted)
    {
        if (accepted)
        {
            DildoClient.DeleteDildo(currentDildo!.Id);
            dildos = DildoClient.GetDildos();
        }
    }
}